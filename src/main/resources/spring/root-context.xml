<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:ORCL"></property>
		<property name="username" value="System"></property>
		<property name="password" value="1234"></property>
	</bean>
	
	<!-- HikariCP configuration -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"/>
	</bean>
	
	<!-- 
        SqlSession : sql구문을 DB에 전달, 실행하는 객체
        SqlSessionFactory : SqlSession을 만드는 객체
        sqlSessionFactoryBean : mybatis 설정 파일(mybatis-config.xml)과 Connection Pool 정보를 이용하여 SqlSessionFactory를 만드는 객체
        sqlSessionTemplate : SqlSession 객체에 트랜잭션 처리 역할이 가능하도록 하는 객체
     -->
     
    <!-- 마이바티스 SqlSession 등록하기 (xml 방식으로 bean 등록)-->
    <!-- SqlSessionFactoryBean: MyBatis 설정파일을 바탕으로 SqlSessionFactory를 생성한다. Spring Bean으로 등록해야 한다.-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath:mappers/**/*mapper.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	
	<!-- 파일 업로드를 위한 CommonsMultipartResolver 객체 bean 등록 -->
    <!-- MultipartResolver를 bean으로 등록하면 multipart/form-data 형식의 요청을 받게될 경우
    		 스프링 컨테이너가 해당 bean을 제어하여 input type="file" 태그를 별도로 얻어와서 처리하여
    		 MultipartFile 객체로 반환해줌.
    		 
    		 - input type="file"에 파일 업로드 여부와 상관없이 무조건 얻어옴
    		 - 태그 하나 또는 업로드된 파일 하나 당 MultipartFile 객체 하나가 반환됨.
    		 
    		 - MultipartResolver가 파일 관련된 내용(multipart/form-data)를 다 처리하므로
    		 	  나머지 일반 텍스트 형태의 데이터를 별도의 처리 없이 사용 가능함.
     -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<property name="maxUploadSize" value="104857600"/>
    	<property name="maxUploadSizePerFile" value="20971520"/>
    	<property name="maxInMemorySize" value="104857600"/>
    </bean>
    <!-- 
    	maxUploadSize : 한 요청당 업로드가 허용되는 최대 용량(바이트 단위)
    	maxUploadSizePerFile : 한 파일당 업로드가 허용되는 최대 용량(바이트 단위)
    	maxInMemorySize : 파일을 디스크에 저장하지 않고 메모리에 유지하도록 허용하는 최대 용량(바이트 단위)
    										지정된 용량보다 업로드 파일이 더 큰 경우 파일로 저장함.
    										(기본값 10240byte)
			
			8bit == 1byte
			1024byte == 1KB
			1024KB == 1MB
			104857600 byte == 100MB
			20971520 byte == 20MB
     -->
     
     
     
	<mybatis-spring:scan base-package="com.gaji.jjmarket.member.model.mapper"/>
	<mybatis-spring:scan base-package="com.gaji.jjmarket.board.model.mapper"/>
	<mybatis-spring:scan base-package="com.gaji.jjmarket.market.model.mapper"/>

</beans>
